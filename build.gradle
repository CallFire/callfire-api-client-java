plugins {
    id "com.jfrog.bintray" version "1.8.4"
    id "co.riiid.gradle" version "0.4.2"
    id "io.freefair.lombok" version "3.8.0"
    id 'idea'
    id 'java'
    id 'maven'
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    jcenter()
    mavenCentral()
}

processResources {
    expand(project.properties)
}

task generatePom {
    doLast {
        pom {
            project {
                inceptionYear '2015'
                licenses {
                    license {
                        name "The MIT License (MIT)"
                        url "https://opensource.org/licenses/MIT"
                        distribution "repo"
                    }
                }
                developers {
                    developer {
                        id "vladimir-mhl"
                        name "Vladimir Mikhailov"
                        email "vmikhailov@callfire.com"
                    }
                }
            }
        }.writeTo("build/META-INF/maven/${project.group}/${project.name}/pom.xml")
    }
}

jar {
    into('META-INF') {
        from 'build/META-INF'
    }
    dependsOn generatePom
}

// artifacts build config
task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

task clientFatJar(type: Jar, dependsOn: jar) {
    archiveClassifier.set('all')
    from {
        [
                sourceSets.main.output,
                configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        ]
    }
}

tasks.withType(Jar) {
    manifest {
        attributes(
                'Manifest-Version': '1.0',
                'Implementation-Title': "${archiveBaseName.get()}",
                'Implementation-Version': "${archiveVersion.get()}",
                'Implementation-Build-Number': sysProp('BUILD_NUMBER'),
                'Implementation-Vendor': 'Callfire, Inc.',
                'Implementation-Build-Date': new Date().format('yyyy-MM-dd'),
                'Implementation-Build-JDK': sysProp('java.version'),
                'Implementation-Build-Gradle': "${gradle.gradleVersion}",
                'Implementation-Target-JDK': "${project.targetCompatibility}",
                'Documentation': 'https://developers.callfire.com',
                'Repository': 'https://github.com/CallFire/callfire-api-client-java'
        )
    }
    into('META-INF') {
        from 'LICENSE'
    }
}

build.dependsOn javadoc

artifacts {
    archives sourcesJar
    archives javadocJar
}

configurations {
    itestImplementation.extendsFrom testImplementation
    itestRuntime.extendsFrom testRuntime
}

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-core:2.9.9'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.9.9'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.9.1'

    implementation 'org.apache.httpcomponents:httpclient:4.5.9'
    implementation 'org.apache.httpcomponents:httpmime:4.5.9'
    implementation 'org.apache.commons:commons-lang3:3.9'

    testImplementation 'org.skyscreamer:jsonassert:1.5.0'
    testImplementation('junit:junit:4.12') {
        exclude module: 'hamcrest'
        exclude module: 'hamcrest-core'
    }
    testImplementation("org.mockito:mockito-core:2.28.2") {
        exclude module: 'hamcrest'
        exclude module: 'hamcrest-core'
    }
    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    testImplementation 'commons-io:commons-io:2.6'
}

idea {
    module {
        downloadJavadoc = true
    }
}

bintray {
    user = sysProp('BINTRAY_USER')
    key = sysProp('BINTRAY_KEY')

    configurations = ['archives']
    publish = true

    pkg {
        repo = 'maven'
        // userOrg = 'Callfire'
        name = 'callfire-api-client-java'
        desc = 'Callfire API java client'
        websiteUrl = 'https://developers.callfire.com'
        issueTrackerUrl = 'https://github.com/CallFire/callfire-api-client-java/issues'
        vcsUrl = 'https://github.com/CallFire/callfire-api-client-java.git'
        licenses = ['MIT']
        labels = ['callfire', 'api', 'client']
        publicDownloadNumbers = true
    }
}

sourceSets {
    itest {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output

        java.srcDir file('src/itest/java')
        resources.srcDir file('src/itest/resources')
    }
}

task itest(type: Test) {
    testClassesDirs = sourceSets.itest.output.classesDirs
    classpath = sourceSets.itest.runtimeClasspath

    systemProperty "testApiUsername", sysProp("testApiUsername")
    systemProperty "testApiPassword", sysProp("testApiPassword")
    systemProperty "testAccountName", sysProp("testAccountName")
    systemProperty "testAccountPassword", sysProp("testAccountPassword")
    systemProperty "testCallerId", sysProp("testCallerId")
}

github {
    repo = "callfire-api-client-java"
    owner = sysProp("gitHubOwner")
    token = sysProp("gitHubToken")
    tagName = version
    targetCommitish = "master"
    name = version
    body = releaseDescription()
    assets = [
            "build/libs/callfire-api-client-" + project.version + "-all.jar",
            "build/libs/callfire-api-client-" + project.version + "-javadoc.jar",
            "build/libs/callfire-api-client-" + project.version + "-sources.jar",
            "build/libs/callfire-api-client-" + project.version + ".jar"
    ]
}

wrapper {
    gradleVersion = '5.5.1'
}

def releaseDescription() {
    String releaseNotes = file("Changelog.txt").text
    String firstVersionEntry = releaseNotes.find(~/Version.*/)
    Integer start = releaseNotes.indexOf(firstVersionEntry) + firstVersionEntry.size()
    releaseNotes = releaseNotes.substring(start, releaseNotes.size())
    String secondVersionEntry = releaseNotes.find(~/Version.*/)
    String currentReleaseChanges = releaseNotes.substring(0, (secondVersionEntry == null ? releaseNotes.size() - 1 : releaseNotes.indexOf(secondVersionEntry))).trim()
    "$currentReleaseChanges"
}

static def sysProp(String name) {
    "${System.properties[name] ?: 'not set'}"
}
