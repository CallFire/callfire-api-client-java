buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id "com.jfrog.bintray" version "1.3.1"
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'maven'

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    jcenter()
}

processResources {
    expand(project.properties)
}

task generatePom << {
    pom {
        //noinspection GroovyAssignabilityCheck
        project {
            //noinspection GroovyAssignabilityCheck
            inceptionYear '2015'
            licenses {
                license {
                    name "The MIT License (MIT)"
                    url "https://opensource.org/licenses/MIT"
                    distribution "repo"
                }
            }
            developers {
                developer {
                    id "vladimir-mhl"
                    name "Vladimir Mikhailov"
                    email "vmikhailov@callfire.com"
                }
            }
        }
    }.writeTo("build/META-INF/maven/${project.group}/${project.name}/pom.xml")
}

jar {
    into('META-INF') {
        from 'build/META-INF'
    }
}
jar.dependsOn generatePom

// artifacts build config
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from {
        sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from {
        javadoc.destinationDir
    }
}

task clientFatJar(type: Jar, dependsOn: jar) {
    classifier = 'all'
    from {
        [
            sourceSets.main.output,
            configurations.runtime.collect {
                it.isDirectory() ? it : zipTree(it)
            }
        ]
    }
}

tasks.withType(Jar) {
    //noinspection GroovyAssignabilityCheck
    manifest {
        //noinspection GroovyAssignabilityCheck
        attributes(
            'Manifest-Version': '1.0',
            'Implementation-Title': name,
            'Implementation-Version': version,
            'Implementation-Build-Number': buildNumber(),
            'Implementation-Vendor': 'Callfire, Inc.',
            'Implementation-Build-Date': new Date().format('yyyy-MM-dd'),
            'Documentation': 'https://developers.callfire.com',
            'Repository': 'https://github.com/CallFire/callfire-api-client-java'
        )
    }
    into('META-INF') {
        from 'LICENSE'
    }
}

build.dependsOn javadoc

artifacts {
    archives sourcesJar
    archives javadocJar
}

configurations {
    itestCompile.extendsFrom testCompile
    itestRuntime.extendsFrom testRuntime
}

dependencies {
    compile 'com.fasterxml.jackson.core:jackson-core:2.6.1'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.6.1'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.6.1'

    compile 'org.apache.httpcomponents:httpclient:4.5'
    compile 'org.apache.httpcomponents:httpmime:4.5'
    compile 'org.apache.commons:commons-lang3:3.4'

    testCompile 'org.skyscreamer:jsonassert:1.2.3'
    testCompile('junit:junit:4.12') {
        exclude module: 'hamcrest'
        exclude module: 'hamcrest-core'
    }
    testCompile("org.mockito:mockito-core:1.10.19") {
        exclude module: 'hamcrest'
        exclude module: 'hamcrest-core'
    }
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'commons-io:commons-io:2.4'
}

idea {
    module {
        downloadJavadoc = true
    }
}

bintray {
    user = System.properties[ 'BINTRAY_USER' ] ?: "user not set"
    key = System.properties[ 'BINTRAY_KEY' ] ?: "key not set"

    configurations = [ 'archives' ]
    publish = true

    pkg {
        repo = 'maven'
        // userOrg = 'Callfire'
        name = 'callfire-api-client-java'
        desc = 'Callfire API java client'
        websiteUrl = 'https://developers.callfire.com'
        issueTrackerUrl = 'https://github.com/CallFire/callfire-api-client-java/issues'
        vcsUrl = 'https://github.com/CallFire/callfire-api-client-java.git'
        licenses = [ 'MIT' ]
        labels = [ 'callfire', 'api', 'client' ]
        publicDownloadNumbers = true
    }
}

def buildNumber() {
    String buildNumber = System.properties[ 'BUILD_NUMBER' ] ?: "SNAPSHOT"
    "$buildNumber"
}

sourceSets {
    itest {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output

        java.srcDir file('src/itest/java')
        resources.srcDir file('src/itest/resources')
    }
}

task itest(type: Test) {
    testClassesDir = sourceSets.itest.output.classesDir
    classpath = sourceSets.itest.runtimeClasspath

    systemProperty "testApiUsername", System.getProperty("testApiUsername")
    systemProperty "testApiPassword", System.getProperty("testApiPassword")
    systemProperty "testAccountName", System.getProperty("testAccountName")
    systemProperty "testAccountPassword", System.getProperty("testAccountPassword")
    systemProperty "testCallerId", System.getProperty("testCallerId")
}
